// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A command or C command                                                            //sending the same wire to another place
//     Mux16(a=false, b=instruction, sel=instruction[15], out[0]=cJGT, out[1]=cJEQ, out[2]=cJLT, out[3]=cDestM, out[3]=writeM, out[4]=cDestD, out[5]=cDestA, out[6]=cNoALU, out[7]=cFAlu, out[8]=cNyAlu, out[9]=cZyAlu, out[10]=cNxAlu, out[11]=cZxAlu, out[12]=cAorM, out[15]=cType); 
//     ALU(x=inputX, y=inputY, zx=cZxAlu, nx=cNxAlu, zy=cZyAlu, ny=cNyAlu, f=cFAlu, no=cNoALU, out=outAlu,out=outM, zr=IsZero, ng=IsNegitive);
        
//     // A reg building
//     Mux16(a=instruction, b=outAlu, sel=cType, out=Amux);
//     Mux16(a=OutAReg, b=inM, sel=cAorM, out=inputY);
   
//     // Loading the A reg 
//     Not(in=cType, out=cTypeNot);
//     Or(a=cTypeNot, b=cDestA, out=loadA);
//     ARegister(in=Amux, load=loadA, out=OutAReg, out[0..14]=addressM);
  

//     DRegister(in=outAlu, load=cDestD, out=inputX);

//     // Jump locig
//     // Is greater than--> for the Jump, A virtual flag
//     Or(a=IsZero, b=IsNegitive, out=outZorN);
//     Not(in=outZorN, out=outNotZN);

//     And(a=cJEQ, b=IsZero, out=JEQ);
//     And(a=cJLT, b=IsNegitive, out=JLT);
//     And(a=cJGT, b=outZorN, out=JGT);
//     // Or3Way(a=JEQ, b=JLT, c=JGT, out=isJump);
//    Or(a=JEQ, b=JLT, out=JLE);
//    Or(a=JGT, b=JLE, out=isJump);
//    PC(in=OutAReg, load=isJump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);

Mux16(a=false, b=instruction, sel=instruction[15], 
    out[0]=cJGT,
    out[1]=cJEQ,
    out[2]=cJLT,
    out[3]=cDestM,
    out[3]=writeM,
    out[4]=cDestD,
    out[5]=cDestA,
    out[6]=cAluNo,
    out[7]=cAluF,
    out[8]=cAluNy,
    out[9]=cAluZy,
    out[10]=cAluNx,
    out[11]=cAluZx,
    out[12]=cAorM,
    out[15]=cType  
    );

ALU(x=xIn, y=yIn, zx=cAluZx, nx=cAluNx, zy=cAluZy, ny=cAluNy, f=cAluF, no=cAluNo, out=aluOut, out=outM, zr=zerop, ng=negp);

Or(a=zerop, b=negp, out=lteq);
Not(in=lteq, out=posp);

// A register logic
Mux16(a=instruction, b=aluOut, sel=cType, out=aMuxOut);
Mux16(a=aRegOut, b=inM, sel=cAorM, out=yIn);

// Loading the A reg 
Not(in=cType, out=notCType);
Or(a=notCType, b=cDestA, out=loadA);
ARegister(in=aMuxOut, load=loadA, out=aRegOut, out[0..14]=addressM);

DRegister(in=aluOut, load=cDestD, out=xIn);

And(a=cJEQ, b=zerop, out=JEQ);
And(a=cJLT, b=negp, out=JLT);
And(a=cJGT, b=posp, out=JGT);

Or(a=JEQ, b=JLT, out=JLE);
Or(a=JGT, b=JLE, out=jump);

PC(in=aRegOut, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}